import os
import requests
import spotipy
import colorsys
from spotipy.oauth2 import SpotifyClientCredentials
from PIL import Image
import io
from spotipy import SpotifyOAuth
from sklearn.cluster import KMeans
import numpy as np
import time

# Spotify setup
scope = "user-read-currently-playing"
spotify_client_id = 'YOUR CLIENT ID'
spotify_client_secret = 'YOUR CLIENT SECRET'
redirect_uri = 'http://localhost:8000'

# Set a custom cache path
cache_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), ".spotify_cache")

sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope=scope, client_id=spotify_client_id, client_secret=spotify_client_secret, redirect_uri=redirect_uri, cache_path=cache_path))

# LIFX setup
lifx_token = 'c38bf06dabe869aa0b51a0b00298b4d6d1d50e13afe5238121be19b58110de9a'
headers = {"Authorization": "Bearer %s" % lifx_token}
selector = 'all'  # change to your light id or label

# Fetch currently playing track
current_track = sp.current_user_playing_track()

# Get album art
album_art_url = current_track['item']['album']['images'][0]['url']
response = requests.get(album_art_url)
img = Image.open(io.BytesIO(response.content))

# Extracting 5 distinct colors from album art using KMeans clustering
pixels = np.array(img).reshape(-1, 3)
kmeans = KMeans(n_clusters=5, n_init=10).fit(pixels)
colors = kmeans.cluster_centers_

# Converting RGB colors to HSB for LIFX
lifx_colors = []
for color in colors:
    hsb_color = colorsys.rgb_to_hsv(color[0]/255, color[1]/255, color[2]/255)
    lifx_color = "hsb:{:.2f},{:.2f},{:.2f}".format(hsb_color[0]*360, hsb_color[1], hsb_color[2])
    lifx_colors.append(lifx_color)

# Sending requests to cycle through the colors
for color in lifx_colors:
    payload = {
        'power': 'on',
        'color': color,
        'brightness': 1.0,  # setting to full brightness
        'duration': 10  # this determines how long it takes to transition to this color
    }
    response = requests.put('https://api.lifx.com/v1/lights/%s/state' % selector, headers=headers, data=payload)
    print(response.content)
    time.sleep(10)  # pausing for the same duration to allow the transition to complete
